(()=>{"use strict";var e={303:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"div#formBackdrop {\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    background-color: rgba(0, 0, 0, 0.4);\n}\n\ndiv#newProjectContainer,\ndiv#newTaskContainer,\ndiv#deleteFormContainer {\n    position: absolute;\n    background-color: rgb(255, 255, 255);\n    width: 400px;\n    transform: translate(-50%, -50%);\n    left: 50%;\n    top: 50%;\n    border-radius: 10px;\n    box-shadow: 0 10px 10px 2px #00000030;\n}\n\ndiv#newProjectContainer {\n    height: 350px;\n}\n\ndiv#newTaskContainer {\n    height: 575px;\n}\n\n#newTaskContainer {\n    height: 575px;\n}\n\n#deleteFormContainer {\n    height: 200px;\n}\n\n.formHeader {\n    display: flex;\n    padding: 15px;\n    justify-content: space-between;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    color: white;\n    font-weight: bold;\n}\n\n.big {\n    height: 10%;\n}\n\n.small {\n    height: 15%\n}\n\n.smaller {\n    height: 25%\n}\n\n.new {\n background-color: #25cd7b\n}\n\n.del {\n background-color: #d9263f\n}\n\np.formTitle {\n    align-self: center;\n    font-size: 26px;\n}\n\np.formClose {\n    font-size: 20px;\n    align-self: center;\n    cursor: pointer;\n}\n\ndiv#projectData,\ndiv#taskData {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 90%;\n    padding: 20px;\n}\n\n.nameContainer {\n    display: flex;\n    flex-direction: column;\n}\n\n.label {\n    margin-left: 10px;\n    font-size: 17px;\n}\n\ninput.text,\ntextarea,\nselect,\n[type=date] {\n    width: 100%;\n    margin: 5px 0 20px 0;\n    padding: 10px;\n    background-color: white;\n    color: #757575;\n    font-size: 15px;\n    border: 1px solid #E6E6E6;\n    border-radius: 3px;\n    transition: .3s;\n}\n\ninput.text:focus-visible,\ntextarea:focus-visible,\nselect:focus-visible,\n[type=date]:focus-visible {\n    outline-color: #25cd7b;\n}\n\n#projectPictures img {\n    height: 40px;\n    padding: 5px;\n    cursor: pointer;\n    transition: 0.3s;\n    margin: 0 13px;\n}\n\n[type=radio] {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n[type=radio]:checked + img {\n    border: 1px solid #25cd7b;\n    border-radius: 2px;\n    padding: 10px;\n}\n\np.label {\n    margin: 0 0 5px 12px;\n}\n\n.buttons {\n    display: flex;\n    justify-content: flex-end;\n    gap: 8px;\n    margin-top: 10px;\n    border-top: 1px solid #E6E6E6;\n    padding: 20px 0 0 0;\n}\n\n.pad {\n    padding: 20px 20px 0 0;\n}\n\nbutton {\n    padding: 10px 17px;\n    cursor: pointer;\n    border-radius: 3px;\n    color: gray;\n    font-size: 15px;\n    transition: .3s;\n}\n\nbutton.cancel,\nbutton.delcancel {\n    background-color: white;\n    border: 1px solid #E6E6E6;\n}\n\nbutton.cancel:hover {\n    border: 1px solid #25cd7b;\n    color: #25cd7b;\n}\n\nbutton.delcancel:hover {\n    border: 1px solid #d9263f;\n    color: #d9263f;\n}\n\nbutton.confirm {\n    background-color: #25cd7b;\n    color: white;\n    border: transparent;\n}\n\nbutton.confirmDeletion {\n    background-color: #d9263f;\n    color: white;\n    border: transparent;\n}\n\nbutton.confirmDeletion:hover {\n    background-color: #a11b2d;\n}\n\nbutton.confirm:hover {\n    background-color: #21b36c;\n}\n\np.formDescription {\n    height: 30%;\n    padding: 13px;\n    font-size: 18px;\n}","",{version:3,sources:["webpack://./src/projectForm.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,YAAY;IACZ,WAAW;IACX,oCAAoC;AACxC;;AAEA;;;IAGI,kBAAkB;IAClB,oCAAoC;IACpC,YAAY;IACZ,gCAAgC;IAChC,SAAS;IACT,QAAQ;IACR,mBAAmB;IACnB,qCAAqC;AACzC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,8BAA8B;IAC9B,4BAA4B;IAC5B,6BAA6B;IAC7B,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI;AACJ;;AAEA;IACI;AACJ;;AAEA;CACC;AACD;;AAEA;CACC;AACD;;AAEA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,eAAe;AACnB;;AAEA;;IAEI,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,iBAAiB;IACjB,eAAe;AACnB;;AAEA;;;;IAII,WAAW;IACX,oBAAoB;IACpB,aAAa;IACb,uBAAuB;IACvB,cAAc;IACd,eAAe;IACf,yBAAyB;IACzB,kBAAkB;IAClB,eAAe;AACnB;;AAEA;;;;IAII,sBAAsB;AAC1B;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,QAAQ;IACR,SAAS;AACb;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,yBAAyB;IACzB,QAAQ;IACR,gBAAgB;IAChB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,WAAW;IACX,eAAe;IACf,eAAe;AACnB;;AAEA;;IAEI,uBAAuB;IACvB,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,WAAW;IACX,aAAa;IACb,eAAe;AACnB",sourcesContent:["div#formBackdrop {\n    position: fixed;\n    height: 100%;\n    width: 100%;\n    background-color: rgba(0, 0, 0, 0.4);\n}\n\ndiv#newProjectContainer,\ndiv#newTaskContainer,\ndiv#deleteFormContainer {\n    position: absolute;\n    background-color: rgb(255, 255, 255);\n    width: 400px;\n    transform: translate(-50%, -50%);\n    left: 50%;\n    top: 50%;\n    border-radius: 10px;\n    box-shadow: 0 10px 10px 2px #00000030;\n}\n\ndiv#newProjectContainer {\n    height: 350px;\n}\n\ndiv#newTaskContainer {\n    height: 575px;\n}\n\n#newTaskContainer {\n    height: 575px;\n}\n\n#deleteFormContainer {\n    height: 200px;\n}\n\n.formHeader {\n    display: flex;\n    padding: 15px;\n    justify-content: space-between;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n    color: white;\n    font-weight: bold;\n}\n\n.big {\n    height: 10%;\n}\n\n.small {\n    height: 15%\n}\n\n.smaller {\n    height: 25%\n}\n\n.new {\n background-color: #25cd7b\n}\n\n.del {\n background-color: #d9263f\n}\n\np.formTitle {\n    align-self: center;\n    font-size: 26px;\n}\n\np.formClose {\n    font-size: 20px;\n    align-self: center;\n    cursor: pointer;\n}\n\ndiv#projectData,\ndiv#taskData {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    height: 90%;\n    padding: 20px;\n}\n\n.nameContainer {\n    display: flex;\n    flex-direction: column;\n}\n\n.label {\n    margin-left: 10px;\n    font-size: 17px;\n}\n\ninput.text,\ntextarea,\nselect,\n[type=date] {\n    width: 100%;\n    margin: 5px 0 20px 0;\n    padding: 10px;\n    background-color: white;\n    color: #757575;\n    font-size: 15px;\n    border: 1px solid #E6E6E6;\n    border-radius: 3px;\n    transition: .3s;\n}\n\ninput.text:focus-visible,\ntextarea:focus-visible,\nselect:focus-visible,\n[type=date]:focus-visible {\n    outline-color: #25cd7b;\n}\n\n#projectPictures img {\n    height: 40px;\n    padding: 5px;\n    cursor: pointer;\n    transition: 0.3s;\n    margin: 0 13px;\n}\n\n[type=radio] {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n[type=radio]:checked + img {\n    border: 1px solid #25cd7b;\n    border-radius: 2px;\n    padding: 10px;\n}\n\np.label {\n    margin: 0 0 5px 12px;\n}\n\n.buttons {\n    display: flex;\n    justify-content: flex-end;\n    gap: 8px;\n    margin-top: 10px;\n    border-top: 1px solid #E6E6E6;\n    padding: 20px 0 0 0;\n}\n\n.pad {\n    padding: 20px 20px 0 0;\n}\n\nbutton {\n    padding: 10px 17px;\n    cursor: pointer;\n    border-radius: 3px;\n    color: gray;\n    font-size: 15px;\n    transition: .3s;\n}\n\nbutton.cancel,\nbutton.delcancel {\n    background-color: white;\n    border: 1px solid #E6E6E6;\n}\n\nbutton.cancel:hover {\n    border: 1px solid #25cd7b;\n    color: #25cd7b;\n}\n\nbutton.delcancel:hover {\n    border: 1px solid #d9263f;\n    color: #d9263f;\n}\n\nbutton.confirm {\n    background-color: #25cd7b;\n    color: white;\n    border: transparent;\n}\n\nbutton.confirmDeletion {\n    background-color: #d9263f;\n    color: white;\n    border: transparent;\n}\n\nbutton.confirmDeletion:hover {\n    background-color: #a11b2d;\n}\n\nbutton.confirm:hover {\n    background-color: #21b36c;\n}\n\np.formDescription {\n    height: 30%;\n    padding: 13px;\n    font-size: 18px;\n}"],sourceRoot:""}]);const c=i},426:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\n#header {\n    display: flex;\n    align-items: center;\n    height: 10vh;\n    background-color: #25cd7b;\n}\n\n#header h1 {\n    color: whitesmoke;\n    padding: 8px;\n    letter-spacing: 5px;\n    margin: 0 0 0 2%;\n\n}\n\n#main {\n    display: flex;\n    justify-content: stretch;\n    height: 80vh;\n}\n\n#sidebar {\n    color: #757575;\n    width: 280px;\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n    align-items: center;\n    border-right: 1px solid rgba(197, 190, 190, 0.616)\n}\n\n.project,\n.userProject {\n    width: 160px;\n    display: flex;\n    justify-content: space-between;\n    padding: 8px;\n    gap: 4px;\n    cursor: pointer;\n    background-color: #efefef\n}\n\n.project:hover,\n.userProject:hover {\n    border: 1px solid #757575;\n    border-radius: 2px;\n}\n\n.project img,\n.userProject img {\n    height: 20px;\n    width: 20px;\n    filter: brightness(0);\n}\n\n\n.project.active,\n.userProject.active {\n    background-color: #25cd7b;\n    color: rgb(0, 0, 0);\n    border-radius: 8px;\n    font-weight:bolder;\n}\n\n.fixed,\n#userProj {\n    display: flex;\n    justify-content: space-between;\n    width: 180px;\n    align-self: center;\n    margin: 20px 0 0 0;\n    border-bottom: 1px solid gray;\n    padding: 0 10px 8px;\n    font-size: 18px;\n}\n\n#home,\n#today,\n#urgent {\n    gap: 35px;\n    justify-content: flex-start;\n}\n\n.project.active:hover {\n  border: none;  \n}\n\n\ndiv#userProjList {\n    gap: 3px;\n    display: flex;\n    flex-direction: column;\n}\n\ndiv#newProj, \ndiv#newTask {\n    font-size: 15px;\n    font-weight: bold;\n    border-radius: 15px;\n    border: #8d8989 1px solid;\n    color: #757575;\n    width: 20px;\n    height: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    transition: 0.3s;\n}\n\ndiv#newProj:hover,\ndiv#newTask:hover {\n    border: 1px solid #25cd7b;\n    color: #25cd7b;\n}\n\n.userProject.active:hover {\n    border: none;\n}\n\n#list {\n    width: -webkit-fill-available;\n    display: flex;\n    flex-direction: column;\n    gap: 10%;\n}\n\n#taskHeader {\n    align-self: center;\n    margin-top: 5%;\n    font-size: xx-large;\n}\n\n#taskCounter {\n    margin: 0 5% 2% 5%;\n    border-bottom: 1px solid #757575;\n    padding: 0 10px 5px;\n    display: flex;\n    justify-content: space-between;\n}\n\n\n.taskEntry {\n    width: -webkit-fill-available;\n    margin: 0 5% 2% 5%;\n    border-radius: 5px;\n    padding: 6px;\n}\n\n.flex {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.taskDate {\n    color: #25cd7b;\n    margin-right: 10px;\n}\n\n.descriptionHeader {\n    margin: 5px 0 3px 0;\n    font-weight: bold;\n    color: #757575;\n    font-size: 17px;\n}\n\n.taskDescription {\n    color:#757575;\n}\n\n.taskEntry.low,\n.low .infoDescr {\n    background-color: #e8f5e9;\n}\n\n.taskEntry.medium,\n.medium .infoDescr {\n    background-color: #fff3e0;\n}\n\n.taskEntry.high,\n.high .infoDescr {\n    background-color: #ffebee\n}\n\n.taskEntry.completed,\n.taskEntry.completed,\n.taskEntry.completed .infoDescr {\n    background-color: #efefef;\n}\n\n.statusBar img:hover {\n    transform: scale(1.25);\n    transition: filter smooth 0.3s;\n    filter: brightness(0)\n}\n\n.completed p {\n    text-decoration: line-through;\n}\n\n.taskPriority {\n    display: flex;\n    gap: 8px;\n    padding: 5px;\n}\n\n.taskEntry img {\n    width: 18px;\n    height: 18px;\n    cursor: pointer;\n}\n\n.taskEntry .statusBar {\n    padding: 5px 5px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n#footer {\n    height: 10vh;\n    border-top: 1px solid rgba(197, 190, 190, 0.616)\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,YAAY;IACZ,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,mBAAmB;IACnB,gBAAgB;;AAEpB;;AAEA;IACI,aAAa;IACb,wBAAwB;IACxB,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,mBAAmB;IACnB;AACJ;;AAEA;;IAEI,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,YAAY;IACZ,QAAQ;IACR,eAAe;IACf;AACJ;;AAEA;;IAEI,yBAAyB;IACzB,kBAAkB;AACtB;;AAEA;;IAEI,YAAY;IACZ,WAAW;IACX,qBAAqB;AACzB;;;AAGA;;IAEI,yBAAyB;IACzB,mBAAmB;IACnB,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;;IAEI,aAAa;IACb,8BAA8B;IAC9B,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,6BAA6B;IAC7B,mBAAmB;IACnB,eAAe;AACnB;;AAEA;;;IAGI,SAAS;IACT,2BAA2B;AAC/B;;AAEA;EACE,YAAY;AACd;;;AAGA;IACI,QAAQ;IACR,aAAa;IACb,sBAAsB;AAC1B;;AAEA;;IAEI,eAAe;IACf,iBAAiB;IACjB,mBAAmB;IACnB,yBAAyB;IACzB,cAAc;IACd,WAAW;IACX,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,gBAAgB;AACpB;;AAEA;;IAEI,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,6BAA6B;IAC7B,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,kBAAkB;IAClB,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,gCAAgC;IAChC,mBAAmB;IACnB,aAAa;IACb,8BAA8B;AAClC;;;AAGA;IACI,6BAA6B;IAC7B,kBAAkB;IAClB,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;IACjB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,yBAAyB;AAC7B;;AAEA;;IAEI,yBAAyB;AAC7B;;AAEA;;IAEI;AACJ;;AAEA;;;IAGI,yBAAyB;AAC7B;;AAEA;IACI,sBAAsB;IACtB,8BAA8B;IAC9B;AACJ;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,QAAQ;IACR,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ;AACJ",sourcesContent:["* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\n#header {\n    display: flex;\n    align-items: center;\n    height: 10vh;\n    background-color: #25cd7b;\n}\n\n#header h1 {\n    color: whitesmoke;\n    padding: 8px;\n    letter-spacing: 5px;\n    margin: 0 0 0 2%;\n\n}\n\n#main {\n    display: flex;\n    justify-content: stretch;\n    height: 80vh;\n}\n\n#sidebar {\n    color: #757575;\n    width: 280px;\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n    align-items: center;\n    border-right: 1px solid rgba(197, 190, 190, 0.616)\n}\n\n.project,\n.userProject {\n    width: 160px;\n    display: flex;\n    justify-content: space-between;\n    padding: 8px;\n    gap: 4px;\n    cursor: pointer;\n    background-color: #efefef\n}\n\n.project:hover,\n.userProject:hover {\n    border: 1px solid #757575;\n    border-radius: 2px;\n}\n\n.project img,\n.userProject img {\n    height: 20px;\n    width: 20px;\n    filter: brightness(0);\n}\n\n\n.project.active,\n.userProject.active {\n    background-color: #25cd7b;\n    color: rgb(0, 0, 0);\n    border-radius: 8px;\n    font-weight:bolder;\n}\n\n.fixed,\n#userProj {\n    display: flex;\n    justify-content: space-between;\n    width: 180px;\n    align-self: center;\n    margin: 20px 0 0 0;\n    border-bottom: 1px solid gray;\n    padding: 0 10px 8px;\n    font-size: 18px;\n}\n\n#home,\n#today,\n#urgent {\n    gap: 35px;\n    justify-content: flex-start;\n}\n\n.project.active:hover {\n  border: none;  \n}\n\n\ndiv#userProjList {\n    gap: 3px;\n    display: flex;\n    flex-direction: column;\n}\n\ndiv#newProj, \ndiv#newTask {\n    font-size: 15px;\n    font-weight: bold;\n    border-radius: 15px;\n    border: #8d8989 1px solid;\n    color: #757575;\n    width: 20px;\n    height: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    transition: 0.3s;\n}\n\ndiv#newProj:hover,\ndiv#newTask:hover {\n    border: 1px solid #25cd7b;\n    color: #25cd7b;\n}\n\n.userProject.active:hover {\n    border: none;\n}\n\n#list {\n    width: -webkit-fill-available;\n    display: flex;\n    flex-direction: column;\n    gap: 10%;\n}\n\n#taskHeader {\n    align-self: center;\n    margin-top: 5%;\n    font-size: xx-large;\n}\n\n#taskCounter {\n    margin: 0 5% 2% 5%;\n    border-bottom: 1px solid #757575;\n    padding: 0 10px 5px;\n    display: flex;\n    justify-content: space-between;\n}\n\n\n.taskEntry {\n    width: -webkit-fill-available;\n    margin: 0 5% 2% 5%;\n    border-radius: 5px;\n    padding: 6px;\n}\n\n.flex {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.taskDate {\n    color: #25cd7b;\n    margin-right: 10px;\n}\n\n.descriptionHeader {\n    margin: 5px 0 3px 0;\n    font-weight: bold;\n    color: #757575;\n    font-size: 17px;\n}\n\n.taskDescription {\n    color:#757575;\n}\n\n.taskEntry.low,\n.low .infoDescr {\n    background-color: #e8f5e9;\n}\n\n.taskEntry.medium,\n.medium .infoDescr {\n    background-color: #fff3e0;\n}\n\n.taskEntry.high,\n.high .infoDescr {\n    background-color: #ffebee\n}\n\n.taskEntry.completed,\n.taskEntry.completed,\n.taskEntry.completed .infoDescr {\n    background-color: #efefef;\n}\n\n.statusBar img:hover {\n    transform: scale(1.25);\n    transition: filter smooth 0.3s;\n    filter: brightness(0)\n}\n\n.completed p {\n    text-decoration: line-through;\n}\n\n.taskPriority {\n    display: flex;\n    gap: 8px;\n    padding: 5px;\n}\n\n.taskEntry img {\n    width: 18px;\n    height: 18px;\n    cursor: pointer;\n}\n\n.taskEntry .statusBar {\n    padding: 5px 5px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n}\n\n#footer {\n    height: 10vh;\n    border-top: 1px solid rgba(197, 190, 190, 0.616)\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var A=n(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var m=a(p,r);r.byIndex=c,t.splice(c,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=n(o[i]);t[c].references--}for(var s=r(e,a),d=0;d<o.length;d++){var l=n(o[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},819:(e,t,n)=>{e.exports=n.p+"c1f845e38d90de82abfd.svg"},809:(e,t,n)=>{e.exports=n.p+"95afb7ba4022027112ee.svg"},172:(e,t,n)=>{e.exports=n.p+"17a689bc15ce69f406ac.svg"},666:(e,t,n)=>{e.exports=n.p+"c1b4dfa12a9ee39d5956.svg"},682:(e,t,n)=>{e.exports=n.p+"cda3ca41ac441d69090c.svg"},911:(e,t,n)=>{e.exports=n.p+"e9d40528dc89c5ad098d.svg"},280:(e,t,n)=>{e.exports=n.p+"37a9a3b6296eabef7651.svg"},208:(e,t,n)=>{e.exports=n.p+"51f37e04196ecb6924dd.svg"},465:(e,t,n)=>{e.exports=n.p+"3fea4781dff02433b86a.svg"},718:(e,t,n)=>{e.exports=n.p+"d7e4956fb3f8821076e6.svg"},518:(e,t,n)=>{e.exports=n.p+"48f4d17b808fe58b819d.svg"},311:(e,t,n)=>{e.exports=n.p+"101812657ca59b7cb1ec.svg"},739:(e,t,n)=>{e.exports=n.p+"97110ace6f80b8931dd3.svg"},870:(e,t,n)=>{e.exports=n.p+"afbf22b8bc478ef0fc70.svg"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})();var r={};(()=>{n.d(r,{Z:()=>Oe});var e=n(379),t=n.n(e),a=n(795),o=n.n(a),i=n(569),c=n.n(i),s=n(565),d=n.n(s),l=n(216),u=n.n(l),A=n(589),p=n.n(A),m=n(426),f={};f.styleTagTransform=p(),f.setAttributes=d(),f.insert=c().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=u(),t()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var h=n(303),g={};g.styleTagTransform=p(),g.setAttributes=d(),g.insert=c().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=u(),t()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var C=n(739),b=n(718),v=n(518),x=n(280),y=n(819),w=n(208),B=n(870),k=n(682);const I=function(){function e(e){qe.deleteGeneratedDivs(".taskEntry");let t=e.tasks.length;for(let n=0;n<t;n++){const t=e.tasks[n];t.projectIndex=!0===e.standard?t.projectIndex:e.position,t.taskIndex=n,console.log(t),qe.createTaskDiv(t)}}return{insertProject:function(){const e=qe.getProjectData();let t=Oe.createProject(e[0],e[1]);console.log(t),Oe.addProject(t)},displayProjects:function(){qe.deleteGeneratedDivs(".userProject");let e=Oe.returnArrayLength();for(let t=0;t<e;t++){const e=Oe.returnProject(t);e.position=t,qe.createProjectDiv(e)}},insertTask:function(e){const t=qe.getTaskData();let n=Oe.createTask(t[0],t[1],t[2],t[3]);n.projectIndex=e.position,Oe.addTask(n.projectIndex,n);const r=document.querySelector("#taskCounter p");let a=Number(r.textContent.split(" ")[0])+1;r.textContent=a+" Task(s)"},editTask:function(e){const t=qe.getTaskData();e.name=t[0],e.description=t[1],e.date=t[2],e.priority=t[3],Oe.replaceEditedTask(e)},deleteTask:function(t,n){Oe.removeTask(t.projectIndex,t.taskIndex),e(n);const r=document.querySelector("#taskCounter p");let a=Number(r.textContent.split(" ")[0])-1;r.textContent=a+" Task(s)"},generateTaskList:e,changeCompletedStatus:function(e,t){switch(!0){case!0===e.completed:e.completed=!1,t.classList.remove("completed");break;case!1===e.completed:e.completed=!0,t.classList.add("completed")}}}}();function E(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function T(e){return E(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function j(e){E(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function D(e){if(E(1,arguments),!T(e)&&"number"!=typeof e)return!1;var t=j(e);return!isNaN(Number(t))}var P={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function S(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}const L={date:S({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:S({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:S({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var M={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Y(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var c=e.defaultWidth,s=a.width?String(a.width):e.defaultWidth;r=e.values[s]||e.values[c]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const U={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Y({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Y({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Y({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Y({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Y({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function q(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,c=o[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(s)?z(s,(function(e){return e.test(c)})):W(s,(function(e){return e.test(c)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var l=t.slice(c.length);return{value:i,rest:l}}}function W(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function z(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}var N,H={ordinalNumber:(N={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(N.matchPattern);if(!n)return null;var r=n[0],a=e.match(N.parsePattern);if(!a)return null;var o=N.valueCallback?N.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const O={code:"en-US",formatDistance:function(e,t,n){var r,a=P[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:L,formatRelative:function(e,t,n,r){return M[e]},localize:U,match:H,options:{weekStartsOn:0,firstWeekContainsDate:1}};function F(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function Q(e,t){E(2,arguments);var n=j(e).getTime(),r=F(t);return new Date(n+r)}function R(e,t){E(2,arguments);var n=F(t);return Q(e,-n)}var Z=864e5;function X(e){E(1,arguments);var t=1,n=j(e),r=n.getUTCDay(),a=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function G(e){E(1,arguments);var t=j(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=X(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=X(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function J(e){E(1,arguments);var t=G(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=X(n);return r}var $=6048e5;function _(e,t){E(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,o=null==a?0:F(a),i=null==n.weekStartsOn?o:F(n.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=j(e),s=c.getUTCDay(),d=(s<i?7:0)+s-i;return c.setUTCDate(c.getUTCDate()-d),c.setUTCHours(0,0,0,0),c}function K(e,t){E(1,arguments);var n=j(e),r=n.getUTCFullYear(),a=t||{},o=a.locale,i=o&&o.options&&o.options.firstWeekContainsDate,c=null==i?1:F(i),s=null==a.firstWeekContainsDate?c:F(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(r+1,0,s),d.setUTCHours(0,0,0,0);var l=_(d,t),u=new Date(0);u.setUTCFullYear(r,0,s),u.setUTCHours(0,0,0,0);var A=_(u,t);return n.getTime()>=l.getTime()?r+1:n.getTime()>=A.getTime()?r:r-1}function V(e,t){E(1,arguments);var n=t||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,o=null==a?1:F(a),i=null==n.firstWeekContainsDate?o:F(n.firstWeekContainsDate),c=K(e,t),s=new Date(0);s.setUTCFullYear(c,0,i),s.setUTCHours(0,0,0,0);var d=_(s,t);return d}var ee=6048e5;function te(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const ne=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return te("yy"===t?r%100:r,t.length)},re=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):te(n+1,2)},ae=function(e,t){return te(e.getUTCDate(),t.length)},oe=function(e,t){return te(e.getUTCHours()%12||12,t.length)},ie=function(e,t){return te(e.getUTCHours(),t.length)},ce=function(e,t){return te(e.getUTCMinutes(),t.length)},se=function(e,t){return te(e.getUTCSeconds(),t.length)},de=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return te(Math.floor(r*Math.pow(10,n-3)),t.length)};var le={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return ne(e,t)},Y:function(e,t,n,r){var a=K(e,r),o=a>0?a:1-a;return"YY"===t?te(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):te(o,t.length)},R:function(e,t){return te(G(e),t.length)},u:function(e,t){return te(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return te(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return te(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return re(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return te(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){E(1,arguments);var n=j(e),r=_(n,t).getTime()-V(n,t).getTime();return Math.round(r/ee)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):te(a,t.length)},I:function(e,t,n){var r=function(e){E(1,arguments);var t=j(e),n=X(t).getTime()-J(t).getTime();return Math.round(n/$)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):te(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):ae(e,t)},D:function(e,t,n){var r=function(e){E(1,arguments);var t=j(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=n-r;return Math.floor(a/Z)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):te(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return te(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return te(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return te(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return oe(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):ie(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):te(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):te(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):ce(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):se(e,t)},S:function(e,t){return de(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return Ae(a);case"XXXX":case"XX":return pe(a);default:return pe(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Ae(a);case"xxxx":case"xx":return pe(a);default:return pe(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+ue(a,":");default:return"GMT"+pe(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+ue(a,":");default:return"GMT"+pe(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return te(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return te((r._originalDate||e).getTime(),t.length)}};function ue(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+te(o,2)}function Ae(e,t){return e%60==0?(e>0?"-":"+")+te(Math.abs(e)/60,2):pe(e,t)}function pe(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+te(Math.floor(a/60),2)+n+te(a%60,2)}const me=le;function fe(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function he(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const ge={p:he,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return fe(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",fe(a,t)).replace("{{time}}",he(o,t))}};function Ce(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var be=["D","DD"],ve=["YY","YYYY"];function xe(e){return-1!==be.indexOf(e)}function ye(e){return-1!==ve.indexOf(e)}function we(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var Be=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ke=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ie=/^'([^]*?)'?$/,Ee=/''/g,Te=/[a-zA-Z]/;function je(e){return e.match(Ie)[1].replace(Ee,"'")}var De=n(172),Pe=n(311),Se=n(809),Le=n(465),Me=n(911),Ye=n(666);const Ue=function(){function e(e){const t=document.createElement("div");t.setAttribute("id","formBackdrop");const r=document.createElement("div");r.setAttribute("id","newProjectContainer");const a=document.createElement("div");a.setAttribute("class","new small formHeader");const o=document.createElement("p");o.textContent="CREATE PROJECT",o.setAttribute("class","formTitle");const i=document.createElement("p");i.textContent="X",i.setAttribute("class","formClose"),i.addEventListener("click",(function(){n(t)})),a.appendChild(o),a.appendChild(i),r.appendChild(a);const c=document.createElement("div");c.setAttribute("id","projectData");const s=document.createElement("div");s.classList.add("nameContainer");const d=document.createElement("label");d.setAttribute("for","projName"),d.setAttribute("class","label"),d.textContent="Project Name:";const l=document.createElement("input");l.setAttribute("type","text"),l.setAttribute("id","projName"),l.setAttribute("class","text"),s.appendChild(d),s.appendChild(l),c.appendChild(s);const u=document.createElement("div");u.classList.add("picturesContainer");const A=document.createElement("div");A.setAttribute("id","projectPictures");const p=document.createElement("p");p.classList.add("label"),p.textContent="Icons:";for(let e=0;e<5;e++){const t=document.createElement("label"),n=document.createElement("input");n.setAttribute("type","radio"),n.setAttribute("name","icon"),n.setAttribute("value",`${e}`),t.appendChild(n),0===e&&(n.checked=!0);const r=document.createElement("img"),a=Oe.extractIcon(e);r.src=a,t.appendChild(r),A.appendChild(t)}u.appendChild(p),u.appendChild(A),c.appendChild(u);const m=document.createElement("div");m.classList.add("buttons");const f=document.createElement("button");f.classList.add("cancel"),f.textContent="Cancel",m.appendChild(f),f.addEventListener("click",(function(){n(t)}));const h=document.createElement("button");h.classList.add("confirm"),h.textContent="Confirm",m.appendChild(h),h.addEventListener("click",(function(){I.insertProject(),I.displayProjects(),n(t)})),c.appendChild(m),r.appendChild(c),t.appendChild(r),document.querySelector("body").insertBefore(t,document.querySelector("#header"))}function t(e,t,r){const a=document.createElement("div");a.setAttribute("id","formBackdrop");const i=document.createElement("div");i.setAttribute("id","deleteFormContainer");const c=document.createElement("div");c.setAttribute("class","del smaller formHeader");const s=document.createElement("p");s.textContent="task"===t?"DELETE TASK":"DELETE PROJECT",s.setAttribute("class","formTitle");const d=document.createElement("p");d.textContent="X",d.setAttribute("class","formClose"),d.addEventListener("click",(function(){n(a)})),c.appendChild(s),c.appendChild(d),i.appendChild(c);const l=document.createElement("p");l.classList.add("formDescription"),l.textContent="task"===t?"Deleted tasks can never be retrieved. Knowing this, do you still wish to proceed?":"Deleted projects can never be retrieved. Knowing this, do you still wish to proceed?",i.appendChild(l);const u=document.createElement("div");u.setAttribute("class","buttons pad");const A=document.createElement("button");A.classList.add("delcancel"),A.textContent="Cancel",u.appendChild(A),A.addEventListener("click",(function(){n(a)}));const p=document.createElement("button");p.classList.add("confirmDeletion"),p.textContent="Confirm",u.appendChild(p),p.addEventListener("click",(function(){"task"===t?(I.deleteTask(r,e),I.displayProjects(),n(a)):(Oe.deleteProject(e.position),I.displayProjects(),o(),n(a))})),i.appendChild(u),a.appendChild(i),document.querySelector("body").insertBefore(a,document.querySelector("#header"))}function n(e){e.remove()}function r(e){document.querySelector("#list").remove();const t=document.createElement("div");t.setAttribute("id","list");const r=document.createElement("div");r.setAttribute("id","taskHeader");const a=document.createElement("img");a.src=e.icon,a.style="height: 20px; margin-right: 8px;",r.appendChild(a);const o=document.createElement("span");o.textContent=e.name,r.appendChild(o),t.appendChild(r);const i=document.createElement("div");i.setAttribute("id","taskContainer");const c=document.createElement("div");c.setAttribute("id","taskCounter");const s=document.createElement("p");s.textContent=`${e.tasks.length} Task(s)`,c.appendChild(s);const d=document.createElement("div");d.setAttribute("id","newTask"),d.textContent="+",d.addEventListener("click",(function(){!function(e){const t=document.createElement("div");t.setAttribute("id","formBackdrop");const r=document.createElement("div");r.setAttribute("id","newTaskContainer");const a=document.createElement("div");a.setAttribute("class","new big formHeader");const o=document.createElement("p");o.textContent="CREATE TASK",o.setAttribute("class","formTitle");const i=document.createElement("p");i.textContent="X",i.setAttribute("class","formClose"),i.addEventListener("click",(function(){n(t)})),a.appendChild(o),a.appendChild(i),r.appendChild(a);const c=document.createElement("div");c.setAttribute("id","projectData");const s=document.createElement("div");s.classList.add("nameContainer");const d=document.createElement("label");d.setAttribute("for","taskName"),d.setAttribute("class","label"),d.textContent="Task name:";const l=document.createElement("input");l.setAttribute("type","text"),l.setAttribute("id","taskName"),l.setAttribute("class","text"),s.appendChild(d),s.appendChild(l),c.appendChild(s);const u=document.createElement("div");u.classList.add("descriptionContainer");const A=document.createElement("label");A.setAttribute("for","taskDescr"),A.setAttribute("class","label"),A.textContent="Task description:";const p=document.createElement("textarea");p.setAttribute("rows","3"),p.setAttribute("col","60"),p.setAttribute("name","taskDescr"),p.setAttribute("id","taskDescr"),u.appendChild(A),u.appendChild(p),c.appendChild(u);const m=document.createElement("div");m.classList.add("dateContainer");const f=document.createElement("label");f.setAttribute("for","taskDate"),f.setAttribute("class","label"),f.textContent="Due date:";const h=document.createElement("input");h.setAttribute("type","date"),h.setAttribute("name","taskDate"),h.setAttribute("value","2022-05-12"),h.setAttribute("id","taskDate"),m.appendChild(f),m.appendChild(h),c.appendChild(m);const g=document.createElement("div");g.classList.add("dateContainer");const C=document.createElement("label");C.setAttribute("for","taskPriority"),C.setAttribute("class","label"),C.textContent="Task priority:";const b=document.createElement("select");b.setAttribute("id","taskPriority"),b.setAttribute("name","taskPriority");const v=["Low","Medium","High"];for(let e=0;e<v.length;e++){const t=document.createElement("option");t.setAttribute("value",`${v[e].toLowerCase()}`),t.textContent=v[e],b.appendChild(t)}g.appendChild(C),g.appendChild(b),c.appendChild(g);const x=document.createElement("div");x.classList.add("buttons");const y=document.createElement("button");y.classList.add("cancel"),y.textContent="Cancel",x.appendChild(y),y.addEventListener("click",(function(){n(t)}));const w=document.createElement("button");w.classList.add("confirm"),w.textContent="Confirm",x.appendChild(w),w.addEventListener("click",(function(){I.insertTask(e),I.generateTaskList(e),n(t)})),c.appendChild(x),r.appendChild(c),t.appendChild(r),document.querySelector("body").insertBefore(t,document.querySelector("#header"))}(e)})),c.appendChild(d),i.appendChild(c);const l=document.createElement("div");l.setAttribute("id","taskList"),i.appendChild(l),t.appendChild(i),document.querySelector("#main").appendChild(t),I.generateTaskList(e)}function a(e){const t=document.querySelector(".active");if(null!==t)return t.classList.remove("active"),void e.classList.add("active");e.classList.add("active")}function o(){document.querySelector("#list").textContent=""}return document.querySelector("#newProj").addEventListener("click",e),{createProjectForm:e,getProjectData:function(){const e=document.querySelector("#formBackdrop");let t,n=e.querySelector("#projName").value;return e.querySelectorAll('input[name="icon"]').forEach((e=>{!0===e.checked&&(t=Oe.extractIcon(Number(e.value)))})),[n,t]},createProjectDiv:function(e){const n=document.createElement("div");n.classList.add("userProject");const o=document.createElement("img");o.src=e.icon,n.appendChild(o);const i=document.createElement("p");e.name.length>7?i.textContent=e.name.slice(0,6)+"...":i.textContent=e.name,n.appendChild(i);const c=document.createElement("img");c.src=De,n.appendChild(c),c.addEventListener("click",(function(){t(e,"project")})),i.addEventListener("click",(function(){a(n),r(e)})),o.addEventListener("click",(function(){a(n),r(e)})),document.querySelector("#userProjList").appendChild(n)},createTaskDiv:function(e){const r=document.createElement("div");switch(r.classList.add("taskEntry"),!0){case"low"===e.priority:r.classList.add("low");break;case"medium"===e.priority:r.classList.add("medium");break;case"high"===e.priority:r.classList.add("high")}!0===e.completed&&r.classList.add("completed");const a=document.createElement("div");a.classList.add("taskPriority"),r.appendChild(a);const o=document.createElement("img");o.src=!0===e.completed?Se:Pe,o.addEventListener("click",(function(){I.changeCompletedStatus(e,r),o.src=!0===e.completed?Se:Pe}));const i=document.createElement("p");i.textContent=e.name,a.appendChild(o),a.appendChild(i);const c=document.createElement("div");c.classList.add("statusBar");const s=document.createElement("p");s.classList.add("datePara"),s.textContent=function(e,t,n){E(2,arguments);var r=String(t),a=n||{},o=a.locale||O,i=o.options&&o.options.firstWeekContainsDate,c=null==i?1:F(i),s=null==a.firstWeekContainsDate?c:F(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=o.options&&o.options.weekStartsOn,l=null==d?0:F(d),u=null==a.weekStartsOn?l:F(a.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var A=j(e);if(!D(A))throw new RangeError("Invalid time value");var p=Ce(A),m=R(A,p),f={firstWeekContainsDate:s,weekStartsOn:u,locale:o,_originalDate:A};return r.match(ke).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,ge[t])(e,o.formatLong,f):e})).join("").match(Be).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return je(n);var i=me[r];if(i)return!a.useAdditionalWeekYearTokens&&ye(n)&&we(n,t,e),!a.useAdditionalDayOfYearTokens&&xe(n)&&we(n,t,e),i(m,n,o.localize,f);if(r.match(Te))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("")}(new Date(e.date),"dd-MM-yyyy"),c.appendChild(s);const d=document.createElement("img");d.src=Le,d.addEventListener("click",(function(){const t=r.querySelector(".infoDescr");if(!0===e.info&&null!==t)t.remove(),e.info=!1,d.src=Le;else{e.info=!0,d.src=Me;const t=document.createElement("div");t.classList.add("infoDescr");const n=document.createElement("p");n.classList.add("descriptionHeader"),n.textContent="Description:",t.appendChild(n);const a=document.createElement("p");a.textContent=e.description,a.classList.add("taskDescription"),t.appendChild(a),r.appendChild(t)}})),c.appendChild(d);const l=document.createElement("img");l.src=Ye,l.addEventListener("click",(function(){!function(e){const t=document.createElement("div");t.setAttribute("id","formBackdrop");const r=document.createElement("div");r.setAttribute("id","newTaskContainer");const a=document.createElement("div");a.setAttribute("class","new big formHeader");const o=document.createElement("p");o.textContent="EDIT TASK",o.setAttribute("class","formTitle");const i=document.createElement("p");i.textContent="X",i.setAttribute("class","formClose"),i.addEventListener("click",(function(){n(t)})),a.appendChild(o),a.appendChild(i),r.appendChild(a);const c=document.createElement("div");c.setAttribute("id","projectData");const s=document.createElement("div");s.classList.add("nameContainer");const d=document.createElement("label");d.setAttribute("for","taskName"),d.setAttribute("class","label"),d.textContent="Task name:";const l=document.createElement("input");l.setAttribute("type","text"),l.setAttribute("id","taskName"),l.setAttribute("class","text"),l.value=e.name,s.appendChild(d),s.appendChild(l),c.appendChild(s);const u=document.createElement("div");u.classList.add("descriptionContainer");const A=document.createElement("label");A.setAttribute("for","taskDescr"),A.setAttribute("class","label"),A.textContent="Task description:";const p=document.createElement("textarea");p.setAttribute("rows","3"),p.setAttribute("col","60"),p.setAttribute("name","taskDescr"),p.setAttribute("id","taskDescr"),p.value=e.description,u.appendChild(A),u.appendChild(p),c.appendChild(u);const m=document.createElement("div");m.classList.add("dateContainer");const f=document.createElement("label");f.setAttribute("for","taskDate"),f.setAttribute("class","label"),f.textContent="Due date:";const h=document.createElement("input");h.setAttribute("type","date"),h.setAttribute("name","taskDate"),h.setAttribute("value","2022-05-12"),h.setAttribute("id","taskDate"),h.value=e.date,m.appendChild(f),m.appendChild(h),c.appendChild(m);const g=document.createElement("div");g.classList.add("dateContainer");const C=document.createElement("label");C.setAttribute("for","taskPriority"),C.setAttribute("class","label"),C.textContent="Task priority:";const b=document.createElement("select");b.setAttribute("id","taskPriority"),b.setAttribute("name","taskPriority");const v=["Low","Medium","High"];for(let e=0;e<v.length;e++){const t=document.createElement("option");t.setAttribute("value",`${v[e].toLowerCase()}`),t.textContent=v[e],b.appendChild(t)}const x=e.priority;Array.from(b.options).forEach((e=>{e.value===x&&(e.selected=!0)})),g.appendChild(C),g.appendChild(b),c.appendChild(g);const y=document.createElement("div");y.classList.add("buttons");const w=document.createElement("button");w.classList.add("cancel"),w.textContent="Cancel",y.appendChild(w),w.addEventListener("click",(function(){n(t)}));const B=document.createElement("button");B.classList.add("confirm"),B.textContent="Change",y.appendChild(B),B.addEventListener("click",(function(){I.editTask(e),I.generateTaskList(Oe.returnProject(e.projectIndex)),n(t)})),c.appendChild(y),r.appendChild(c),t.appendChild(r),document.querySelector("body").insertBefore(t,document.querySelector("#header"))}(e)})),c.appendChild(l);const u=document.createElement("img");u.src=De,u.addEventListener("click",(function(){t(Oe.returnProject(e.projectIndex),"task",e)})),c.appendChild(u);const A=document.createElement("div");A.classList.add("flex"),A.appendChild(a),A.appendChild(c),r.appendChild(A),document.querySelector("#taskList").appendChild(r)},showProjectInterface:r,deleteGeneratedDivs:function(e){null!==document.querySelector(e)&&Array.from(document.querySelectorAll(e)).forEach((e=>e.remove()))},getTaskData:function(){const e=document.querySelector("#formBackdrop");return[e.querySelector("#taskName").value,e.querySelector("#taskDescr").value,e.querySelector("#taskDate").value,e.querySelector("#taskPriority").value]},emptyList:o,deleteAddProjectIcon:function(){document.querySelector("#newTask").remove()},setActive:a}}(),qe=Ue;function We(e){E(1,arguments);var t=j(e);return t.setHours(0,0,0,0),t}function ze(e,t){E(2,arguments);var n=We(e),r=We(t);return n.getTime()===r.getTime()}function Ne(e){return E(1,arguments),ze(e,Date.now())}const He=function(){const e=[C,b,v,x,y],t=[];return{extractIcon:function(t){return e[t]},createProject:function(e,t){return{name:e,icon:t,tasks:[],position:0}},createTask:function(e,t,n,r){return{name:e,description:t,date:n,priority:r,completed:!1,position:0}},addProject:function(e){t.push(e)},addTask:function(e,n){t[e].tasks.push(n)},removeTask:function(e,n){t[e].tasks.splice(n,1)},returnArrayLength:function(){return t.length},returnProject:function(e){return t[e]},deleteProject:function(e){t.splice(e,1)},replaceEditedTask:function(e){t[e.projectIndex].tasks[e.taskIndex]=e}}}(),Oe=(function(){const e={name:"Home",icon:w,tasks:[],standard:!0},t={name:"Today",icon:B,tasks:[],standard:!0},n={name:"Urgent",icon:k,tasks:[],standard:!0};function r(){let r=He.returnArrayLength();for(let a=0;a<r;a++){let r=He.returnProject(a);for(let o=0;o<r.tasks.length;o++){let i=r.tasks[o];switch(i.projectIndex=a,i.taskIndex=o,e.tasks.push(i),!0){case"high"===i.priority:n.tasks.push(i);case Ne(new Date(i.date)):t.tasks.push(i)}}}}function a(){e.tasks=[],t.tasks=[],n.tasks=[]}!function(){const o=document.querySelector("#home"),i=document.querySelector("#today"),c=document.querySelector("#urgent");o.addEventListener("click",(function(){a(),r(),qe.showProjectInterface(e),qe.deleteAddProjectIcon(),qe.setActive(o)})),i.addEventListener("click",(function(){a(),r(),qe.showProjectInterface(t),qe.deleteAddProjectIcon(),qe.setActive(i)})),c.addEventListener("click",(function(){a(),r(),qe.showProjectInterface(n),qe.deleteAddProjectIcon(),qe.setActive(c)}))}()}(),He)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,